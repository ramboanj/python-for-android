Seulement dans dlib/: build
Les sous-répertoires current/dlib-master/dlib et dlib/dlib sont identiques
Les sous-répertoires current/dlib-master/docs et dlib/docs sont identiques
Seulement dans dlib/: example.log
Les sous-répertoires current/dlib-master/examples et dlib/examples sont identiques
diff -u current/dlib-master/.gitignore dlib/.gitignore
--- current/dlib-master/.gitignore	2021-01-17 19:22:06.000000000 +0100
+++ dlib/.gitignore	2021-01-14 14:56:42.211284136 +0100
@@ -15,4 +15,4 @@
 docs/docs/git-logs.xml
 docs/docs/python/classes.txt
 docs/docs/python/functions.txt
-docs/docs/python/constants.txt
+
Seulement dans current/dlib-master/: LICENSE.txt
Les sous-répertoires current/dlib-master/python_examples et dlib/python_examples sont identiques
diff -u current/dlib-master/setup.py dlib/setup.py
--- current/dlib-master/setup.py	2021-01-17 19:22:06.000000000 +0100
+++ dlib/setup.py	2021-01-16 10:33:22.947829558 +0100
@@ -43,6 +43,13 @@
 from setuptools.command.build_ext import build_ext
 from distutils.version import LooseVersion
 
+# Example:CMAKE_LIBRARY_OUTPUT_DIRECTORY=#os.path.abspath("build/libdlib")
+# "CMAKE_TEMP_OUTPUT_DIRECTORY"os.path.abspath("build/tempdlib")
+switcher={
+    "PYTHON_EXECUTABLE":sys.executable,
+    "CMAKE_LIBRARY_OUTPUT_DIRECTORY":None,
+    "CMAKE_TEMP_OUTPUT_DIRECTORY":None
+}
 
 def get_extra_cmake_options():
     """read --clean, --no, --set, --compiler-flags, and -G options from the command line and add them as cmake switches.
@@ -63,6 +70,12 @@
             _cmake_extra_options.append('-D{arg}=no'.format(arg=arg.strip()))
         elif opt_key == 'set':
             _cmake_extra_options.append('-D{arg}'.format(arg=arg.strip()))
+        elif opt_key == 'opt':
+            optPy=arg.strip()
+            print("OPTION=",optPy)
+            separate=optPy.split("=")
+            switcher[separate[0]]=' '.join(separate[1:])
+            print(separate[0],"=",' '.join(separate[1:]))
 
         if opt_key:
             sys.argv.remove(arg)
@@ -78,7 +91,7 @@
             print("The --yes options to dlib's setup.py don't do anything since all these options ")
             print("are on by default.  So --yes has been removed.  Do not give it to setup.py.")
             sys.exit(1)
-        if arg in ['--no', '--set', '--compiler-flags']:
+        if arg in ['--no', '--set','--opt','--compiler-flags']:
             opt_key = arg[2:].lower()
             sys.argv.remove(arg)
             continue
@@ -96,7 +109,6 @@
     def __init__(self, name, sourcedir=''):
         Extension.__init__(self, name, sources=[])
         self.sourcedir = os.path.abspath(sourcedir)
-
 def rmtree(name):
     """remove a directory and its subdirectories.
     """
@@ -118,26 +130,30 @@
     def get_cmake_version(self):
         try:
             out = subprocess.check_output(['cmake', '--version'])
-        except:
-            sys.stderr.write("\nERROR: CMake must be installed to build dlib\n\n") 
-            sys.exit(1)
+        except OSError:
+            raise RuntimeError("\n*******************************************************************\n" +
+                                  " CMake must be installed to build the following extensions: " +
+                               ", ".join(e.name for e in self.extensions) + 
+                               "\n*******************************************************************\n")
         return re.search(r'version\s*([\d.]+)', out.decode()).group(1)
 
     def run(self):
         cmake_version = self.get_cmake_version()
         if platform.system() == "Windows":
             if LooseVersion(cmake_version) < '3.1.0':
-                sys.stderr.write("\nERROR: CMake >= 3.1.0 is required on Windows\n\n")
-                sys.exit(1)
+                raise RuntimeError("CMake >= 3.1.0 is required on Windows")
 
         for ext in self.extensions:
             self.build_extension(ext)
 
     def build_extension(self, ext):
-        extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.name)))
-
+        extdir = switcher["CMAKE_LIBRARY_OUTPUT_DIRECTORY"]
+        if (extdir==None):
+                extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.name)))
+        print("EXTDIR=",extdir)
+        print("Execute with",switcher["PYTHON_EXECUTABLE"]);
         cmake_args = ['-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=' + extdir,
-                      '-DPYTHON_EXECUTABLE=' + sys.executable]
+                      '-DPYTHON_EXECUTABLE=' +  switcher["PYTHON_EXECUTABLE"]]
 
         cmake_args += cmake_extra_options 
 
@@ -155,8 +171,10 @@
             # Do a parallel build
             build_args += ['--', '-j'+str(num_available_cpu_cores(2))]
 
-        build_folder = os.path.abspath(self.build_temp)
-
+        build_folder = switcher["CMAKE_TEMP_OUTPUT_DIRECTORY"]
+        if (build_folder==None):
+            build_folder = os.path.abspath(self.build_temp)
+        print("WRITING in",build_folder)
         if clean_build_folder:
             rmtree(build_folder)
         if not os.path.exists(build_folder):
Les sous-répertoires current/dlib-master/tools et dlib/tools sont identiques
